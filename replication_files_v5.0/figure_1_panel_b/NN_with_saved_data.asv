close all
clear
clc

load datadata.mat

traindimvalue=0.8;

nxx=size(xx,1);
traindim=rond(nxx*.traindimvalue);
checkdim=nxx-traindim;

% Create a pattern recognition network
hiddenLayerSize = 10;

net = feedforwardnet(hiddenLayerSize);
%net.layers{2}.transferFcn = 'purelin';


% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 0.7; % 70% for training
net.divideParam.valRatio = 0.15;  % 15% for validation
net.divideParam.testRatio = 0.15; % 15% for testing

xx=xx';
yy=yy';
yy1=yy1';
yy2=yy2';

xxt=xx(:,1:traindim);
yyt=yy(:,1:traindim);
yy1t=yy1(:,1:traindim);
yy2t=yy2(:,1:traindim);

% Train the Network

[net,tr] = train(net,xxt,yyt);

xtest=xtest';
ytest=ytest';

ynet=zeros(1,size(xtest,2));

for i=1:size(xtest,2)

    ynet(1,i)=net(xtest(:,i));

end

errornet=abs(ytest-ynet);
toc

close all
plot(1:size(xtest,2),ytest,'color','r');
hold on
plot(1:size(xtest,2),ynet,'color','b');


corr(ytest',ynet')



